# RedwoodJS Project Context
The application is focused on helping organizations track both financial expenses and environmental impact, with features for managing projects, expenses, trips, and flight-related emissions.


## Technologies & Versions
- **RedwoodJS** v8.5.0
- **TypeScript** 5.x (strict mode)
- **Prisma** 5.x
- **Storybook** 7.x
- **Jest** 29.x
- **Clerk** for auth (using @clerk/express)
- **rw-shad** v2.x for shadcn/ui integration
- **React** 18.x
- **Tailwind CSS** 3.x
- **Node** 20.x

## Project Structure
```
/my-redwood-app
├── api
│   ├── prisma
│   │   └── schema.prisma         # Database schema & migrations
│   ├── src
│   │   ├── functions             # GraphQL API functions
│   │   ├── services              # Business logic & GraphQL resolvers
│   │   ├── graphql               # SDL files (queries, mutations, types)
│   │   └── lib                   # Shared libraries (auth decoders, utilities, etc.)
├── web
│   ├── public                    # Static assets (images, favicons, etc.)
│   ├── src
│   │   ├── components            # Shared UI components & cells
│   │   │   └── Button            # Example: Each component has its own folder
│   │   │       ├── Button.tsx         # Component implementation
│   │   │       ├── Button.stories.tsx # Storybook stories
│   │   │       ├── Button.test.tsx    # Jest tests
│   │   │       └── Button.mock.tsx    # (For cells) mocking data
│   │   ├── layouts               # Layout components (header, footer, etc.)
│   │   ├── pages                 # Page components corresponding to routes
│   │   ├── stories               # Global or additional Storybook stories
│   │   └── test                  # General test utilities or additional tests
```

## Key Conventions

### 1. Version & Tooling
- RedwoodJS 8.5.0 is used throughout the project with Yarn 4.
- Run `yarn rw prisma migrate dev` to apply schema changes.
- Use Redwood’s dev commands:
  - `yarn rw dev` (local dev)
  - `yarn rw test` (tests)
  - `yarn rw storybook` (Storybook dev)

### 2. TypeScript
- Strict mode is enabled.
- Ensure all services, GraphQL resolvers, and React components adhere to strong typing.

### 3. Prisma & Models
- Refer to `/api/db/schema.prisma` for model definitions.
- Models use **PascalCase** names (User, Organization, Project, etc.).
- Field names appear in **camelCase** (e.g. organizationId, clerkId).
- Enum names in ALL_CAPS or PascalCase (e.g. `USER_STATUS`, `ReimbursementStatus`).

### 4. Auth with Clerk
- Clerk is integrated via `@clerk/express`.
- Redwood config uses `clerkAuthDecoder` in `api/src/functions/auth.ts` or similar.
- The `User` model may include `clerkId` for references.
- Roles come from Clerk’s session or metadata, verified in Redwood’s `getCurrentUser` or services.
Key features of Clerk implementation:
1. Use useAuth() hook to access:
- isAuthenticated: Check if user is logged in
- hasRole: Check user roles
- currentUser: Access user data
- signUp: Initiate signup
- loading: Check auth state
2. Protect routes using:
- <PrivateSet>: For authenticated routes
- roles prop: For role-based access
- unauthenticated: Redirect path for unauthorized users
3. Backend protection using:
- @requireAuth directive in GraphQL SDL
- requireAuth() function in services
- Role checking with hasRole()
4. User roles are stored in Clerk's metadata and accessible via currentUser.roles
This setup provides a complete authentication and authorization system integrated with Clerk's services.

### 5. shadcn/ui
- Components installed via rw-shad or shadcn CLI.
- Placed in `web/src/components/ui`.
- Import pattern:
  ```tsx
  import { Button } from '@/components/ui/Button'
  ```
- Customize via Tailwind classes in `className` props.

### 6. Testing (Jest)
- Files named `*.test.ts` or `*.test.tsx`.
- Use Redwood’s helpers:
  ```ts
  import { render, screen, waitFor } from '@redwoodjs/testing/web'
  ```
- Colocate test files with their corresponding services, pages, or components.

### 7. Storybook
- Redwood config in `web/.storybook`.
- Place stories in `web/src/stories` or next to components as `*.stories.tsx`.
- CSF 3.0 format + TypeScript meta:
  ```tsx
  import type { Meta, StoryObj } from '@storybook/react'
  import { Button } from '@/components/ui/Button'

  const meta: Meta<typeof Button> = {
    title: 'UI/Button',
    component: Button,
  }
  export default meta
  type Story = StoryObj<typeof Button>

  export const Primary: Story = {
    args: {
      variant: 'default',
      children: 'Click me',
    },
  }
  ```

### 8. Redwood Patterns
- **Cells** for data fetching. Example:
  ```tsx
  export const Success = ({ expenses }) => {
    return expenses.map(...)
  }
  ```
- **Scaffolding** usage:
  ```bash
  yarn rw g scaffold expense
  ```
- Redwood’s built-in components like `<Form>` used with shadcn UI parts.

### 9. Schema Conventions
- The `schema.prisma` file includes relations (one-to-many, etc.).
- Foreign keys often in `camelCase` (e.g. `organizationId`, `userId`).
- Use Redwood’s recommended approach for migrations:
  ```bash
  yarn rw prisma migrate dev
  ```
- Keep enum usage consistent with the existing models (ex. `USER_STATUS`).

### 10. Styling & Layout
- Tailwind CSS 3 under Redwood’s default setup.
- Redwood’s scaffold-generated CSS in `web/src/scaffold.css` for Redwood forms, table, etc.
- Additional custom classes for shadcn/ui in `web/src/components/ui/` or global styles.
- css classes prefixed with `rw-` for Redwood-specific styles. These styles are defined in `web/src/scaffold.css`

### 11. Common Patterns & Reminders
- Validate user input in service functions.
- Redwood’s `requireAuth` or role-based checks in GraphQL SDL or services.
- For multi-tenant or org-level logic, pass `organizationId` to service queries.
- After updates, run `yarn rw type-check` to ensure consistent types.
- Keep test coverage for cells, components, and services.
- Use Redwood’s recommended directory structure for maintainability.



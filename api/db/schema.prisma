// Don't forget to tell Prisma about your edits to this file using
// `yarn rw prisma migrate dev` or `yarn rw prisma db push`.
// `migrate` is like committing while `push` is for prototyping.
// Read more about both here:
// https://www.prisma.io/docs/orm/prisma-migrate

// prisma/schema.prisma
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  // uncomment next line if you use Prisma <5.10
  // directUrl = env("DATABASE_URL_UNPOOLED")

  // Increase connection pool settings
  // connection_limit = 20
  // pool_timeout = 20
}

generator client {
  provider      = "prisma-client-js"
  binaryTargets = "native"
}

// Define your own datamodels here and run `yarn redwood prisma migrate dev`
// to create migrations for them and apply to your dev DB.
// TODO: Please remove the following example:
enum ReimbursementStatus {
  NOT_REQUESTED
  PENDING
  REIMBURSED
  RECEIVED
}

enum USER_STATUS {
  ACTIVE
  INACTIVE
}

// Enum for rate_type
enum RATE_TYPE {
  HOURLY
  DAILY
  WEEKLY
}

model ExpenseCategory {
  id      Int       @id @default(autoincrement())
  name    String    @unique @db.VarChar(50)
  norName String    @unique @db.VarChar(50)
  Expense Expense[]
}

model Sector {
  id       Int       @id @default(autoincrement())
  name     String    @unique @db.VarChar(50)
  factor   Decimal
  currency String    @db.VarChar(3)
  Expense  Expense[]
}

model Organization {
  id          Int          @id @default(autoincrement())
  regnr       String       @unique @db.VarChar(9)
  name        String       @unique @db.VarChar(100)
  description String?      @db.Text
  createdAt   DateTime     @default(now())
  Project     Project[]
  User        User[]
  Product     Product[]
  Rates       Rate[]
  Customer    Customer[]
  Department  Department[]
}

model Department {
  id             Int          @id @default(autoincrement())
  name           String
  organizationId Int
  Organization   Organization @relation(fields: [organizationId], references: [id])
  projects       Project[]
  workEntries    WorkEntry[]
}

model User {
  id             Int          @id @default(autoincrement())
  clerkId        String?      @unique @db.VarChar(100)
  username       String       @unique @db.VarChar(64)
  email          String       @unique @db.VarChar(120)
  firstName      String?      @db.VarChar(100)
  lastName       String?      @db.VarChar(50)
  bankAccount    String?      @db.VarChar(50)
  status         USER_STATUS  @default(INACTIVE)
  homeAddress    String?      @db.VarChar(255)
  workAddress    String?      @db.VarChar(255)
  homeLatitude   Float?
  homeLongitude  Float?
  workLatitude   Float?
  workLongitude  Float?
  organizationId Int
  Organization   Organization @relation(fields: [organizationId], references: [id])
  Expense        Expense[]
  Trip           Trip[]
  Rates          Rate[]
  WorkEntry      WorkEntry[] // One-to-many relation to WorkEntry
  UserProject    Project[]    @relation("CreatedBy")
  WorkReport     WorkReport[]

  @@index([username], name: "idx_user_username")
}

// Customer model
model Customer {
  id                 Int          @id @default(autoincrement())
  name               String
  registrationNumber String?
  organizationId     Int
  organization       Organization @relation(fields: [organizationId], references: [id])
  rates              Rate[] // One-to-many relation to Rate
  WorkEntry          WorkEntry[]
}

model Project {
  id             Int              @id @default(autoincrement())
  name           String           @db.VarChar(100)
  description    String?          @db.Text
  active         Boolean          @default(true)
  organizationId Int?
  Organization   Organization?    @relation(fields: [organizationId], references: [id])
  Department     Department?      @relation(fields: [departmentId], references: [id])
  departmentId   Int?
  createdById    Int?
  createdBy      User?            @relation("CreatedBy", fields: [createdById], references: [id])
  Expense        Expense[]
  Trip           Trip[]
  createdAt      DateTime         @default(now())
  productLinks   ProductProject[]
  Product        Product[]
  WorkEntry      WorkEntry[]
}

model ProductProject {
  id         Int     @id @default(autoincrement())
  product    Product @relation(fields: [productId], references: [id])
  productId  Int
  project    Project @relation(fields: [projectId], references: [id])
  projectId  Int
  allocation Float? // optional percentage of project allocated to product
}

model Product {
  id             Int              @id @default(autoincrement())
  name           String           @db.VarChar(100)
  description    String?          @db.Text
  organizationId Int
  Organization   Organization     @relation(fields: [organizationId], references: [id])
  project        Project?         @relation(fields: [projectId], references: [id])
  projectId      Int?
  WorkEntry      WorkEntry[]
  ProjectLinks   ProductProject[]
}

model Trip {
  id                  Int                 @id @default(autoincrement())
  name                String              @db.VarChar(100)
  description         String?             @db.Text
  startDate           DateTime
  endDate             DateTime
  createdAt           DateTime            @default(now())
  userId              Int
  User                User                @relation(fields: [userId], references: [id])
  Expense             Expense[]
  approvedDate        DateTime?
  reimbursementStatus ReimbursementStatus @default(NOT_REQUESTED)
  transactionId       String?             @db.VarChar(100)
  projectId           Int
  Project             Project             @relation(fields: [projectId], references: [id])
}

// Rate model
model Rate {
  id          Int         @id @default(autoincrement())
  customerId  Int?        // Make optional
  customer    Customer?   @relation(fields: [customerId], references: [id]) // Optional relation
  userId      Int?        // Add optional user relation for freelancer rates
  user        User?       @relation(fields: [userId], references: [id])
  internal    Boolean     @default(false) // Flag for internal organization rates
  organizationId Int?     // Optional direct link to organization for internal rates
  organization Organization? @relation(fields: [organizationId], references: [id])
  rateType    RATE_TYPE
  rateAmount  Decimal     @db.Decimal(10, 2) // Numeric field with precision 10, scale 2
  description String? // Optional text field
  workEntries WorkEntry[] // One-to-many relation to WorkEntry
}

// WorkEntry model
model WorkEntry {
  id           Int         @id @default(autoincrement())
  user         User        @relation(fields: [userId], references: [id]) // Foreign key to User
  userId       Int
  date         DateTime    @db.Date // Date-only field
  startTime    DateTime?   @db.Time // Optional time field
  endTime      DateTime?   @db.Time // Optional time field
  duration     Decimal     @db.Decimal(5, 2) // Numeric field with precision 5, scale 2
  description  String
  privateNotes String?
  rate         Rate        @relation(fields: [rateId], references: [id]) // Foreign key to Rate
  rateId       Int
  customer     Customer?   @relation(fields: [customerId], references: [id])
  customerId   Int?
  project      Project?    @relation(fields: [projectId], references: [id])
  projectId    Int?
  Department   Department? @relation(fields: [departmentId], references: [id])
  departmentId Int?
  Product      Product?    @relation(fields: [productId], references: [id])
  productId    Int?
  workReport   WorkReport? @relation(fields: [workReportId], references: [id])
  workReportId String?
  createdAt    DateTime    @default(now())
}

model WorkReport {
  id          String              @id @default(uuid())
  user        User                @relation(fields: [userId], references: [id])
  userId      Int
  startDate   DateTime
  endDate     DateTime
  status      ReimbursementStatus @default(NOT_REQUESTED)
  entries     WorkEntry[]
  totalHours  Float?
  totalAmount Float?
  submittedAt DateTime?
  paidAt      DateTime?
  receivedAt  DateTime?
  createdAt   DateTime            @default(now())
}

model Expense {
  id                 Int             @id @default(autoincrement())
  categoryId         Int
  category           ExpenseCategory @relation(fields: [categoryId], references: [id])
  amount             Decimal
  currency           String          @db.VarChar(3)
  exchangeRate       Decimal         @default(1.0)
  nokAmount          Decimal
  date               DateTime        @default(now())
  description        String?         @db.Text
  merchant           String?         @db.VarChar(100)
  kilometers         Float?          @default(0.0)
  fuelType           String?         @db.VarChar(50)
  fuelAmountLiters   Float?          @default(0.0)
  sectorId           Int?
  Sector             Sector?         @relation(fields: [sectorId], references: [id])
  tripId             Int
  Trip               Trip            @relation(fields: [tripId], references: [id])
  projectId          Int?
  Project            Project?        @relation(fields: [projectId], references: [id])
  userId             Int
  User               User            @relation(fields: [userId], references: [id])
  scope1Co2Emissions Float           @default(0.0)
  scope2Co2Emissions Float           @default(0.0)
  scope3Co2Emissions Float           @default(0.0)
  kwh                Float?          @default(0.0)
  scope3CategoryId   Int             @default(6)
  Receipt            Receipt?
}

model Receipt {
  id        Int      @id @default(autoincrement())
  url       String
  fileName  String
  fileType  String
  expenseId Int      @unique // for one-to-one relation
  Expense   Expense  @relation(fields: [expenseId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Don't forget to tell Prisma about your edits to this file using
// `yarn rw prisma migrate dev` or `yarn rw prisma db push`.
// `migrate` is like committing while `push` is for prototyping.
// Read more about both here:
// https://www.prisma.io/docs/orm/prisma-migrate

// prisma/schema.prisma
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  // uncomment next line if you use Prisma <5.10
  // directUrl = env("DATABASE_URL_UNPOOLED")

  // Increase connection pool settings
  // connection_limit = 20
  // pool_timeout = 20
}

generator client {
  provider      = "prisma-client-js"
  binaryTargets = "native"
}

// Define your own datamodels here and run `yarn redwood prisma migrate dev`
// to create migrations for them and apply to your dev DB.
// TODO: Please remove the following example:
enum ReimbursementStatus {
  NOT_REQUESTED
  PENDING
  REIMBURSED
}

enum USER_STATUS {
  ACTIVE
  INACTIVE
}

// Enum for rate_type
enum RateType {
  hourly
  daily
}

model Organization {
  id          Int        @id @default(autoincrement())
  regnr       String     @unique @db.VarChar(9)
  name        String     @unique @db.VarChar(100)
  description String?    @db.Text
  createdAt   DateTime   @default(now())
  Project     Project[]
  User        User[]
  Supplier    Supplier[]
}

model User {
  id              Int          @id @default(autoincrement())
  clerkId         String?      @unique @db.VarChar(100)
  username        String       @unique @db.VarChar(64)
  email           String       @unique @db.VarChar(120)
  firstName       String?      @db.VarChar(100)
  lastName        String?      @db.VarChar(50)
  bankAccount     String?      @db.VarChar(50)
  status          USER_STATUS  @default(INACTIVE)
  homeAddress     String?      @db.VarChar(255)
  workAddress     String?      @db.VarChar(255)
  homeLatitude    Float?
  homeLongitude   Float?
  workLatitude    Float?
  workLongitude   Float?
  organizationId  Int
  Organization    Organization @relation(fields: [organizationId], references: [id])
  Expense         Expense[]
  Trip            Trip[]
  customers       Customer[] // One-to-many relation to Customer
  workEntries     WorkEntry[] // One-to-many relation to WorkEntry
  createdProjects Project[]    @relation("CreatedBy")

  @@index([username], name: "idx_user_username")
}

model Supplier {
  id             Int          @id @default(autoincrement())
  name           String       @db.VarChar(100)
  contact        String?      @db.VarChar(100)
  organizationId Int
  organization   Organization @relation(fields: [organizationId], references: [id])
  Expense        Expense[]
}

// Customer model
model Customer {
  id     Int    @id @default(autoincrement())
  user   User   @relation(fields: [userId], references: [id]) // Foreign key to User
  userId Int
  name   String
  rates  Rate[] // One-to-many relation to Rate
}

// Rate model
model Rate {
  id          Int         @id @default(autoincrement())
  customer    Customer    @relation(fields: [customerId], references: [id]) // Foreign key to Customer
  customerId  Int
  rateType    RateType
  rateAmount  Decimal     @db.Decimal(10, 2) // Numeric field with precision 10, scale 2
  description String? // Optional text field
  workEntries WorkEntry[] // One-to-many relation to WorkEntry
}

// WorkEntry model
model WorkEntry {
  id        Int       @id @default(autoincrement())
  user      User      @relation(fields: [userId], references: [id]) // Foreign key to User
  userId    Int
  date      DateTime  @db.Date // Date-only field
  startTime DateTime? @db.Time // Optional time field
  endTime   DateTime? @db.Time // Optional time field
  duration  Decimal   @db.Decimal(5, 2) // Numeric field with precision 5, scale 2
  rate      Rate      @relation(fields: [rateId], references: [id]) // Foreign key to Rate
  rateId    Int
}

model Trip {
  id                  Int                 @id @default(autoincrement())
  name                String              @db.VarChar(100)
  description         String?             @db.Text
  startDate           DateTime
  endDate             DateTime
  createdAt           DateTime            @default(now())
  userId              Int
  User                User                @relation(fields: [userId], references: [id])
  Expense             Expense[]
  approvedDate        DateTime?
  reimbursementStatus ReimbursementStatus @default(NOT_REQUESTED)
  transactionId       String?             @db.VarChar(100)
  projectId           Int // Remove the optional (?) marker
  Project             Project             @relation(fields: [projectId], references: [id])
}

model Project {
  id             Int           @id @default(autoincrement())
  name           String        @db.VarChar(100)
  description    String?       @db.Text
  active         Boolean       @default(true)
  organizationId Int? // Add this field
  Organization   Organization? @relation(fields: [organizationId], references: [id]) // Add this relation
  createdById    Int?
  createdBy      User?         @relation("CreatedBy", fields: [createdById], references: [id])
  Expense        Expense[]
  Trip           Trip[]
  createdAt      DateTime      @default(now())
}

model ExpenseCategory {
  id      Int       @id @default(autoincrement())
  name    String    @unique @db.VarChar(50)
  norName String    @unique @db.VarChar(50)
  Expense Expense[]
}

model Sector {
  id       Int       @id @default(autoincrement())
  name     String    @unique @db.VarChar(50)
  factor   Decimal
  currency String    @db.VarChar(3)
  Expense  Expense[]
}

model Expense {
  id                 Int             @id @default(autoincrement())
  categoryId         Int
  category           ExpenseCategory @relation(fields: [categoryId], references: [id])
  amount             Decimal
  currency           String          @db.VarChar(3)
  exchangeRate       Decimal         @default(1.0)
  nokAmount          Decimal
  date               DateTime        @default(now())
  description        String?         @db.Text
  merchant           String?         @db.VarChar(100)
  kilometers         Float?          @default(0.0)
  fuelType           String?         @db.VarChar(50)
  fuelAmountLiters   Float?          @default(0.0)
  sectorId           Int?
  Sector             Sector?         @relation(fields: [sectorId], references: [id])
  supplierId         Int?
  Supplier           Supplier?       @relation(fields: [supplierId], references: [id])
  tripId             Int
  Trip               Trip            @relation(fields: [tripId], references: [id])
  projectId          Int?
  Project            Project?        @relation(fields: [projectId], references: [id])
  userId             Int
  User               User            @relation(fields: [userId], references: [id])
  scope1Co2Emissions Float           @default(0.0)
  scope2Co2Emissions Float           @default(0.0)
  scope3Co2Emissions Float           @default(0.0)
  kwh                Float?          @default(0.0)
  scope3CategoryId   Int             @default(6)
  Receipt            Receipt?
}

model Receipt {
  id        Int      @id @default(autoincrement())
  url       String
  fileName  String
  fileType  String
  expenseId Int      @unique // for one-to-one relation
  Expense   Expense  @relation(fields: [expenseId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

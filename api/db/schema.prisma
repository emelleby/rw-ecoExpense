// Don't forget to tell Prisma about your edits to this file using
// `yarn rw prisma migrate dev` or `yarn rw prisma db push`.
// `migrate` is like committing while `push` is for prototyping.
// Read more about both here:
// https://www.prisma.io/docs/orm/prisma-migrate

// prisma/schema.prisma
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  // uncomment next line if you use Prisma <5.10
  // directUrl = env("DATABASE_URL_UNPOOLED")
}

generator client {
  provider      = "prisma-client-js"
  binaryTargets = "native"
}

// Define your own datamodels here and run `yarn redwood prisma migrate dev`
// to create migrations for them and apply to your dev DB.
// TODO: Please remove the following example:
enum ReimbursementStatus {
  NOT_REQUESTED
  PENDING
  REIMBURSED
}

enum USER_STATUS {
  ACTIVE
  INACTIVE
}

model Organization {
  id          Int        @id @default(autoincrement())
  regnr       String     @unique @db.VarChar(9)
  name        String     @unique @db.VarChar(100)
  description String?    @db.Text
  createdAt   DateTime   @default(now())
  users       User[]
  suppliers   Supplier[]
}

model User {
  id             Int          @id @default(autoincrement())
  clerkId        String?      @unique @db.VarChar(100)
  username       String       @unique @db.VarChar(64)
  email          String       @unique @db.VarChar(120)
  firstName      String?      @db.VarChar(100)
  lastName       String?      @db.VarChar(50)
  bankAccount    String?      @db.VarChar(50)
  status         USER_STATUS  @default(INACTIVE)
  organizationId Int
  organization   Organization @relation(fields: [organizationId], references: [id])
  expenses       Expense[]
  trips          Trip[]
  projects       Project[]

  @@index([username], name: "idx_user_username")
}

model Supplier {
  id             Int          @id @default(autoincrement())
  name           String       @db.VarChar(100)
  contact        String?      @db.VarChar(100)
  organizationId Int
  organization   Organization @relation(fields: [organizationId], references: [id])
  expenses       Expense[]
}

model Trip {
  id                  Int                 @id @default(autoincrement())
  name                String              @db.VarChar(100)
  description         String?             @db.Text
  startDate           DateTime
  endDate             DateTime
  userId              Int
  user                User                @relation(fields: [userId], references: [id])
  expenses            Expense[]
  approvedDate        DateTime?
  reimbursementStatus ReimbursementStatus @default(NOT_REQUESTED)
  transactionId       String?             @db.VarChar(100)
}

model Project {
  id          Int       @id @default(autoincrement())
  name        String    @db.VarChar(100)
  description String?   @db.Text
  userId      Int
  user        User      @relation(fields: [userId], references: [id])
  expenses    Expense[]
}

model ExpenseCategory {
  id       Int       @id @default(autoincrement())
  name     String    @unique @db.VarChar(50)
  norName  String    @unique @db.VarChar(50)
  expenses Expense[]
}

model Sector {
  id       Int       @id @default(autoincrement())
  name     String    @unique @db.VarChar(50)
  factor   Decimal
  currency String    @db.VarChar(3)
  expenses Expense[]
}

model Expense {
  id                 Int             @id @default(autoincrement())
  categoryId         Int
  category           ExpenseCategory @relation(fields: [categoryId], references: [id])
  amount             Decimal
  currency           String          @db.VarChar(3)
  exchangeRate       Decimal         @default(1.0)
  nokAmount          Decimal
  date               DateTime        @default(now())
  description        String?         @db.Text
  kilometers         Float?          @default(0.0)
  fuelType           String?         @default("") @db.VarChar(50)
  fuelAmountLiters   Float?          @default(0.0)
  sectorId           Int?
  Sector             Sector?         @relation(fields: [sectorId], references: [id])
  supplierId         Int?
  supplier           Supplier?       @relation(fields: [supplierId], references: [id])
  tripId             Int
  trip               Trip            @relation(fields: [tripId], references: [id])
  projectId          Int?
  project            Project?        @relation(fields: [projectId], references: [id])
  userId             Int
  user               User            @relation(fields: [userId], references: [id])
  scope1Co2Emissions Float           @default(0.0)
  scope2Co2Emissions Float           @default(0.0)
  scope3Co2Emissions Float           @default(0.0)
  kwh                Float?          @default(0.0)
  scope3CategoryId   Int             @default(6)
  receipt            Receipt?
}

model Receipt {
  id        Int      @id @default(autoincrement())
  url       String
  fileName  String
  fileType  String
  expenseId Int      @unique // for one-to-one relation
  expense   Expense  @relation(fields: [expenseId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
